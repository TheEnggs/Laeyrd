export const programmingLanguages = [
  { value: "javascript", label: "JavaScript", icon: "‚ö°" },
  { value: "typescript", label: "TypeScript", icon: "üî∑" },
  { value: "python", label: "Python", icon: "üêç" },
  { value: "java", label: "Java", icon: "‚òï" },
  { value: "cpp", label: "C++", icon: "‚öôÔ∏è" },
  { value: "rust", label: "Rust", icon: "ü¶Ä" },
  { value: "go", label: "Go", icon: "üêπ" },
  { value: "php", label: "PHP", icon: "üêò" },
  { value: "ruby", label: "Ruby", icon: "üíé" },
  { value: "swift", label: "Swift", icon: "üçé" },
];

export const codeSamples: Record<string, string> = {
  javascript: `// JavaScript Example\nfunction fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nclass Calculator {\n  constructor() {\n    this.result = 0;\n  }\n\n  add(value) {\n    this.result += value;\n    return this;\n  }\n\n  multiply(value) {\n    this.result *= value;\n    return this;\n  }\n}\n\nconst calc = new Calculator();\nconsole.log(calc.add(5).multiply(2).result); // 10`,
  typescript: `// TypeScript Example\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  isActive: boolean;\n}\n\nclass UserService {\n  private users: User[] = [];\n\n  async getUser(id: number): Promise<User | null> {\n    return this.users.find(user => user.id === id) || null;\n  }\n\n  async createUser(userData: Omit<User, 'id'>): Promise<User> {\n    const newUser: User = {\n      ...userData,\n      id: Date.now(),\n    };\n    this.users.push(newUser);\n    return newUser;\n  }\n}\n\nconst userService = new UserService();`,
  python: `# Python Example\nfrom typing import List, Optional\nfrom dataclasses import dataclass\n\n@dataclass\nclass User:\n    id: int\n    name: str\n    email: str\n    is_active: bool = True\n\nclass UserService:\n    def __init__(self):\n        self.users: List[User] = []\n\n    async def get_user(self, user_id: int) -> Optional[User]:\n        return next((user for user in self.users if user.id == user_id), None)\n\n    async def create_user(self, name: str, email: str) -> User:\n        new_user = User(\n            id=len(self.users) + 1,\n            name=name,\n            email=email\n        )\n        self.users.append(new_user)\n        return new_user\n\nuser_service = UserService()`,
  java: `// Java Example\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Optional;\n\npublic class User {\n    private int id;\n    private String name;\n    private String email;\n    private boolean isActive;\n\n    public User(int id, String name, String email) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n        this.isActive = true;\n    }\n\n    // Getters and setters\n    public int getId() { return id; }\n    public String getName() { return name; }\n    public String getEmail() { return email; }\n    public boolean isActive() { return isActive; }\n}\n\npublic class UserService {\n    private List<User> users = new ArrayList<>();\n\n    public Optional<User> getUser(int id) {\n        return users.stream()\n                   .filter(user -> user.getId() == id)\n                   .findFirst();\n    }\n\n    public User createUser(String name, String email) {\n        User newUser = new User(users.size() + 1, name, email);\n        users.add(newUser);\n        return newUser;\n    }\n}`,
  cpp: `// C++ Example\n#include <iostream>\n#include <vector>\n#include <string>\n#include <memory>\n\nclass User {\nprivate:\n    int id;\n    std::string name;\n    std::string email;\n    bool isActive;\n\npublic:\n    User(int id, const std::string& name, const std::string& email)\n        : id(id), name(name), email(email), isActive(true) {}\n\n    int getId() const { return id; }\n    const std::string& getName() const { return name; }\n    const std::string& getEmail() const { return email; }\n    bool getIsActive() const { return isActive; }\n};\n\nclass UserService {\nprivate:\n    std::vector<std::unique_ptr<User>> users;\n\npublic:\n    User* getUser(int id) {\n        for (const auto& user : users) {\n            if (user->getId() == id) {\n                return user.get();\n            }\n        }\n        return nullptr;\n    }\n\n    User* createUser(const std::string& name, const std::string& email) {\n        auto newUser = std::make_unique<User>(users.size() + 1, name, email);\n        User* userPtr = newUser.get();\n        users.push_back(std::move(newUser));\n        return userPtr;\n    }\n};`,
  rust: `// Rust Example\nuse std::collections::HashMap;\n\n#[derive(Debug, Clone)]\nstruct User {\n    id: u32,\n    name: String,\n    email: String,\n    is_active: bool,\n}\n\nimpl User {\n    fn new(id: u32, name: String, email: String) -> Self {\n        User {\n            id,\n            name,\n            email,\n            is_active: true,\n        }\n    }\n}\n\nstruct UserService {\n    users: HashMap<u32, User>,\n    next_id: u32,\n}\n\nimpl UserService {\n    fn new() -> Self {\n        UserService {\n            users: HashMap::new(),\n            next_id: 1,\n        }\n    }\n\n    fn get_user(&self, id: u32) -> Option<&User> {\n        self.users.get(&id)\n    }\n\n    fn create_user(&mut self, name: String, email: String) -> &User {\n        let user = User::new(self.next_id, name, email);\n        self.users.insert(self.next_id, user);\n        self.next_id += 1;\n        self.users.get(&(self.next_id - 1)).unwrap()\n    }\n}`,
  go: `// Go Example\npackage main\n\nimport (\n    "fmt"\n    "sync"\n)\n\ntype User struct {\n    ID       int    \`json:"id"\`\n    Name     string \`json:"name"\`\n    Email    string \`json:"email"\`\n    IsActive bool   \`json:"is_active"\`\n}\n\ntype UserService struct {\n    users map[int]*User\n    mutex sync.RWMutex\n    nextID int\n}\n\nfunc NewUserService() *UserService {\n    return &UserService{\n        users: make(map[int]*User),\n        nextID: 1,\n    }\n}\n\nfunc (s *UserService) GetUser(id int) (*User, bool) {\n    s.mutex.RLock()\n    defer s.mutex.RUnlock()\n    user, exists := s.users[id]\n    return user, exists\n}\n\nfunc (s *UserService) CreateUser(name, email string) *User {\n    s.mutex.Lock()\n    defer s.mutex.Unlock()\n\n    user := &User{\n        ID:       s.nextID,\n        Name:     name,\n        Email:    email,\n        IsActive: true,\n    }\n\n    s.users[s.nextID] = user\n    s.nextID++\n    return user\n}`,
  php: `<?php\n// PHP Example\n\nclass User {\n    private int $id;\n    private string $name;\n    private string $email;\n    private bool $isActive;\n\n    public function __construct(int $id, string $name, string $email) {\n        $this->id = $id;\n        $this->name = $name;\n        $this->email = $email;\n        $this->isActive = true;\n    }\n\n    public function getId(): int {\n        return $this->id;\n    }\n\n    public function getName(): string {\n        return $this->name;\n    }\n\n    public function getEmail(): string {\n        return $this->email;\n    }\n\n    public function isActive(): bool {\n        return $this->isActive;\n    }\n}\n\nclass UserService {\n    private array $users = [];\n    private int $nextId = 1;\n\n    public function getUser(int $id): ?User {\n        return $this->users[$id] ?? null;\n    }\n\n    public function createUser(string $name, string $email): User {\n        $user = new User($this->nextId, $name, $email);\n        $this->users[$this->nextId] = $user;\n        $this->nextId++;\n        return $user;\n    }\n}\n\n$userService = new UserService();\n?>`,
  ruby: `# Ruby Example\nclass User\n  attr_reader :id, :name, :email, :is_active\n\n  def initialize(id, name, email)\n    @id = id\n    @name = name\n    @email = email\n    @is_active = true\n  end\n\n  def to_s\n    "User(id: #{@id}, name: #{@name}, email: #{@email})"\n  end\nend\n\nclass UserService\n  def initialize\n    @users = []\n    @next_id = 1\n  end\n\n  def get_user(id)\n    @users.find { |user| user.id == id }\n  end\n\n  def create_user(name, email)\n    user = User.new(@next_id, name, email)\n    @users << user\n    @next_id += 1\n    user\n  end\n\n  def list_users\n    @users.each { |user| puts user }\n  end\nend\n\nuser_service = UserService.new`,
  swift: `// Swift Example\nimport Foundation\n\nstruct User: Codable {\n    let id: Int\n    let name: String\n    let email: String\n    var isActive: Bool\n\n    init(id: Int, name: String, email: String) {\n        self.id = id\n        self.name = name\n        self.email = email\n        self.isActive = true\n    }\n}\n\nclass UserService {\n    private var users: [User] = []\n    private var nextId: Int = 1\n\n    func getUser(id: Int) -> User? {\n        return users.first { $0.id == id }\n    }\n\n    func createUser(name: String, email: String) -> User {\n        let user = User(id: nextId, name: name, email: email)\n        users.append(user)\n        nextId += 1\n        return user\n    }\n\n    func getAllUsers() -> [User] {\n        return users\n    }\n}\n\nlet userService = UserService()`,
};
